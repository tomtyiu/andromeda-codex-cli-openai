"use strict";var j=Object.create;var g=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var A=(o,t)=>{for(var i in t)g(o,i,{get:t[i],enumerable:!0})},I=(o,t,i,m)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of b(t))!W.call(o,r)&&r!==i&&g(o,r,{get:()=>t[r],enumerable:!(m=P(t,r))||m.enumerable});return o};var u=(o,t,i)=>(i=o!=null?j(U(o)):{},I(t||!o||!o.__esModule?g(i,"default",{value:o,enumerable:!0}):i,o)),B=o=>I(g({},"__esModule",{value:!0}),o);var S={};A(S,{activate:()=>K,deactivate:()=>R});module.exports=B(S);var e=u(require("vscode")),k=require("child_process"),a=u(require("fs/promises")),h=u(require("os")),p=u(require("path"));var w=u(require("vscode")),T="codex-diff",M=class{contents=new Map;setContent(t,i){this.contents.set(t.toString(),i)}provideTextDocumentContent(t){return this.contents.get(t.toString())}},D=new M;w.workspace.registerTextDocumentContentProvider(T,D);async function l(o,t,i="Codex Diff"){let m=w.Uri.parse(`${T}://original`),r=w.Uri.parse(`${T}://modified`);D.setContent(m,o),D.setContent(r,t),await w.commands.executeCommand("vscode.diff",m,r,i)}function K(o){if(!e.window.activeTextEditor){e.window.showErrorMessage("No active editor found.");return}console.log('Congratulations, your extension "andromeda-codex" is now active!');let i=e.commands.registerCommand("codex.prompt",async()=>{let d=await e.window.showInputBox({prompt:"Enter a prompt for Codex"});if(!d){e.window.showWarningMessage("No prompt entered.");return}let n=e.window.activeTextEditor;if(!n){e.window.showErrorMessage("No active editor found.");return}let c=n.document.uri.fsPath,s=n.document.getText(),f=await a.mkdtemp(p.join(h.tmpdir(),"codex-prompt-")),x=p.join(f,"input.txt"),v=p.join(f,"output.txt");await a.writeFile(x,s,"utf8");let C=d.replace(/"/g,'\\"'),F=e.window.createTerminal({name:"Codex"});F.show(!0),F.sendText(`npx codex "${C} ${c}"`,!0);let E=await a.readFile(v,"utf8");if(s!==E)if(await l(s,E,"Codex Prompt Diff"),await e.window.showInformationMessage("Codex made changes to this file. Do you want to keep the changes?","Keep","Ignore")==="Keep"){let y=new e.WorkspaceEdit,N=new e.Range(n.document.positionAt(0),n.document.positionAt(s.length));y.replace(n.document.uri,N,E),await e.workspace.applyEdit(y),await n.document.save(),e.window.showInformationMessage("Codex changes applied.")}else e.window.showInformationMessage("Codex changes ignored.");else e.window.showInformationMessage("No changes were made by Codex.")}),m=e.commands.registerCommand("codex.model",async()=>{let d=await e.window.showInputBox({prompt:"Enter a prompt for Codex (Model o4-mini)"});if(!d){e.window.showWarningMessage("No prompt entered.");return}let n=e.window.activeTextEditor;if(!n){e.window.showErrorMessage("No active editor found.");return}let c=n.document.uri.fsPath,s=e.window.createTerminal({name:"Codex Model"});s.show(!0);let f=d.replace(/"/g,'\\"');s.sendText(`npx codex --model o4-mini "${f}" "${c}"`,!0)}),r=e.commands.registerCommand("codex.fixCode",async()=>{let d=e.window.activeTextEditor;if(!d){e.window.showErrorMessage("No active editor found.");return}let n=d.selection;if(n.isEmpty){e.window.showWarningMessage("No code selected.");return}let c=d.document.getText(n),s;try{s=await $(c)}catch(C){e.window.showErrorMessage(`Codex CLI error: ${C.message}`);return}await l(c,s,"Codex Fix Diff");let f=await a.mkdtemp(p.join(h.tmpdir(),"codex-term-")),x=p.join(f,"input.txt");await a.writeFile(x,c,"utf8");let v=e.window.createTerminal({name:"Codex Fix"});v.show(!0),v.sendText(`npx codex fix "${x}"`,!0)});o.subscriptions.push(i,m,r),o.subscriptions.push(e.commands.registerCommand("codex.fixCode",async()=>{let d=e.window.activeTextEditor;if(!d){e.window.showErrorMessage("No active editor");return}let n=d.selection,c=d.document.getText(n),s=await $(c);await l(c,s,"Codex Fix Diff")}))}async function $(o){let t=await a.mkdtemp(p.join(h.tmpdir(),"codex-")),i=p.join(t,"input.txt"),m=p.join(t,"output.txt");await a.writeFile(i,o,"utf8");let r=`npx codex fix "${i}" > "${m}"`;return await new Promise((n,c)=>{(0,k.exec)(r,s=>{s?c(s):n()})}),await a.readFile(m,"utf8")}function R(){}0&&(module.exports={activate,deactivate});
